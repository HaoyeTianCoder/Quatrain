{"Chart-1": "source/org/jfree/chart/renderer/category/AbstractCategoryRenderer.java (getLegendItems): Fix null check.", "Chart-2": "source/org/jfree/chart/DatasetUtilities.java (iterateRangeBounds(XYDataste, boolean)): For IntervalXYDataset, include regular value and account for nulls / Double.NaN.", "Chart-5": "Fix for bug 1955483.", "Chart-9": "source/org/jfree/data/time/TimeSeries.java (createCopy(RegularTimePeriod, RegularTimePeriod)): Handle empty range.", "Chart-11": "source/org/jfree/chart/util/SerialUtilities.java (readShape): Handle SEG_CLOSE for GeneralPath, Use correct path for comparison.", "Chart-12": "source/org/jfree/chart/plot/MultiplePiePlot.java (MultiplePiePlot(CategoryDataset)): Call setDataset() to ensure that plot registers as a dataset listener.", "Chart-16": " source/org/jfree/data/DefaultIntervalCategoryDataset.java (DefaultIntervalCategoryDataset(Comparable[], Comparable[], Number[][], Number[][]): Initialise seriesKeys and categoryKeys to empty arrays instead of null for empty dataset,(setCategoryKeys): Fixed argument check to handle empty dataset.", "Chart-17": "source/org/jfree/data/time/TimeSeries.java (clone): Reimplemented.", "Mockito-1": "Fixes #188 : attempt to implement logic for varargs capture", "Mockito-2": "Fixes #197 : Blocks ability to use negative value for timeout() and after() method.", "Mockito-3": "Fixes #188 : provided working example for vararg capture issue.", "Mockito-4": "Fixes #187 : print mock name even when default answer is bogus", "Mockito-5": "Merge branch 'issue-152-incorrect-junit-dependencies'", "Mockito-6": "Stop anyX() methods matching null inputs", "Mockito-7": "Merge branch 'pbielicki-bug#128'", "Mockito-8": "Fixes issue #114", "Mockito-9": "Changed CallsRealMethods to delegate to default answer for abstract methods.", "Mockito-10": "Merge pull request #103 from mockito/fixes-issue-99", "Mockito-11": "Merge pull request #87 from hughwphamill/master", "Mockito-12": "Fixed issue 188 @Captor annotation should work OK with nested parametrized type", "Mockito-13": "Fixed issue 138 again, hopefully this time forever :)", "Mockito-14": "Fixed issue 138 When verify contains extra calls to other mocks (highly unlikely) then Mockito was verifying wrong invocation. Now it is all good.", "Mockito-15": "Fix for issue 211", "Mockito-16": "Fixed issue 151. Merged from trunk. Mockito should not be so defensive and clear potential stubbed call on creation of new mock", "Mockito-17": "Fixed issue 152 User should be able to configure the mock to be serializable and have extra interfaces", "Mockito-18": "Adds empty iterable as a new empty value #210", "Mockito-19": "Fixes #205.", "Mockito-20": "Adds support for issue #92 with ByteBuddy", "Mockito-21": "Fixed problem with type testing of outer classes", "Mockito-22": "Merge branch 'issue484-fix' of git://github.com/MajA7jHbJYW2N/mockito into MajA7jHbJYW2N-issue484-fix", "Mockito-23": "Merge pull request #30 from marcingrzejszczak/issue399", "Mockito-24": "Merge pull request #32 from alberskib/master", "Mockito-25": "Merge branch 'issue230'", "Mockito-26": "issue 352 : With answer ReturnsEmptyValues, Mockito-mocked methods returning primitive types other than \"int\" throw ClassCastException: java.lang.Integer. Thanks to Jesse Wilson for spotting that one and providing a patch. I changed a few things however  especially:  - used Primitives utility class instead  - applied underscored names for test cases, as decided internally", "Mockito-27": "issue 282 : mock invocation listeners were removed on reset(mock)", "Mockito-28": "fix for issue 236 : mocks are injected a bit less aggressively", "Mockito-29": "Fix for issue 229 in the describeTo phase of the Same matcher, when match is failing", "Mockito-30": "printing args on smart nulls NullPointerException message (Issue #225)", "Mockito-31": "printing args on smart nulls toString (Issue #225)", "Mockito-32": "Fixed issue 216 @Spy did not have nice names in the verification errors", "Mockito-33": "Fixed issue 200 For some weird reason when we had inherited generics sometimes the cglib proxy does not behave like java proxy would. Fixed in Mockito code.", "Mockito-34": "Fixed issue 157 In order to avoid ArrayIndexOutOfBoundsException when anyvarag() matcher in use", "Mockito-35": "Fixed issue 98 In order to avoid NPE in some very rare cases.", "Mockito-36": "Inform the user with a good message when she tries to 'callRealMethod()' on a mock of a interface. Fixed issue 140", "Mockito-37": "Inform the user immediately when she tries to 'callRealMethod()' on a mock of a interface. Fixed issue 140", "Mockito-38": "In order to fixed issue 79 (NPE) added null handling code", "Lang-1": "NumberUtils does not handle Long Hex numbers", "Lang-3": "Method createNumber from NumberUtils doesn't work for floating point numbers other than Float", "Lang-4": "Allow LookupTranslator to support CharSequence properly; previously it was working only for CharSequence's that implemented hashCode and equals(Object). LANG-882", "Lang-5": "LocaleUtils.toLocale does not parse strings starting with an underscore.", "Lang-6": "StringIndexOutOfBoundsException in CharSequenceTranslator.", "Lang-7": "NumberUtils#createNumber - bad behaviour for leading \"--\"", "Lang-8": "FastDateFormat's \"z\" pattern does not respect timezone of Calendar instances passed to format()", "Lang-9": "FastDateParser does not handle unterminated quotes correctly", "Lang-10": "FastDateParser does not handle white-space properly", "Lang-11": "RandomStringUtils throws confusing IAE when end <= start", "Lang-12": "RandomStringUtils.random(count, 0, 0, false, false, universe, random) always throws java.lang.ArrayIndexOutOfBoundsException", "Lang-13": "SerializationUtils throws ClassNotFoundException when cloning primitive classes", "Lang-14": "StringUtils equals() relies on undefined behavior; thanks to Daniel Trebbien", "Lang-15": "[LANG-776] fix related bugs dealing with type variable inheritance", "Lang-16": "NumberUtils does not handle upper-case hex: 0X and -0X", "Lang-17": "StringEscapeUtils.escapeXml(input) outputs wrong results when an input contains characters in Supplementary Planes.  ALSO rewrite method to avoid modification of counter variable in for loop", "Lang-18": "Adjust FastDateFormat for Java 7 behavior regarding format of the year pattern (LANG-719).", "Lang-19": "Adding tests and resolving LANG-710, reported by Benjamin Valentin. Note that this changed such that the code will now escape an unfinished entity (i.e. &#030). This matches browser behaviour.", "Lang-20": "Applying Ilya's patch from LANG-703 fixing an NPE when toString returns null", "Lang-21": "DateUtils isSameLocalTime() compares the hour using 12hour Calendar.HOUR instead of 24hour Calendar.HOUR_OF_DAY - thanks to Christian", "Lang-22": "Adding first method check from Math's MathUtils.gcd method; and unit tests showing that this was needed. Bug reported and solved by Christian Semrau [LANG-662]", "Lang-23": "ExtendedMessageFormat doesn't override equals(Object)", "Lang-24": "Fixing NumberUtils.isNumber so that 1.1L is not considered a number. LANG-664", "Lang-25": "Fix remaining entries", "Lang-26": "Applying my fix to LANG-645, and Mikael's test case; fixing the FastDateFormat to properly include the locale when formatting a Date", "Lang-27": "Making it so that NumberUtils.createNumber throws a NumberFormatException instead of a StringIndexOutOfBoundsException when Strings such as 1eE are passed in. Thanks to Ingo Heinrich's report and patch in LANG-638", "Lang-28": "Adding a test, and code fix, to have supplementary chars working in numeric entity unescaping. See LANG-617", "Lang-29": "SystemUtils.getJavaVersionAsFloat throws StringIndexOutOfBoundsException on Android runtime/Dalvik VM. Oops, fix return type.", "Lang-30": "StringUtils methods do not handle Unicode 2.0+ supplementary characters correctly.", "Lang-31": "StringUtils.containsAny methods incorrectly matches Unicode 2.0+ supplementary characters.", "Lang-32": "Clear ThreadLocal for HashCodeBuilder as well", "Lang-33": "avoid NPE in ClassUtils.toClass(Object[])", "Lang-34": "part 2: refactor ToStringStyle and ToStringBuilderTest to verify that we are unsetting the registry when no longer needed", "Lang-35": "ArrayUtils.add(T[] array[, offset], T element) can create unexpected ClassCastException", "Lang-36": "isNumber(String) and createNumber(String) both modified to support \"2.\". LANG-521", "Lang-37": "- ArrayUtils.addAll(T[] array1, T... array2) does not handle mixed types very well Also remove unnecessary main() and suite() from test class", "Lang-38": "Fixing LANG-538 - you need to call getTime() on a calendar sometimes to get it in the right state, otherwise the timezone gets out of whack.", "Lang-39": "Applying fix for LANG-552. StringUtils.replaceEach(String, String[], String[]) no longer NPEs when null appears in the last String[]", "Lang-40": "Applying the final part of Benjamin Bentmann's patch to LANG-432, improving our handling of case-insensitive Strings", "Lang-41": "Applying my patch from LANG-535 - adding support to getShortClassName and getPackageName for arrays, including primitive arrays and multi-dimensional arrays. Also stopped getPackageName relying on the underlying class.getPackage as it's sometimes null", "Lang-42": "Applying Alexander Kjall's patch from LANG-480; along with a unit test made from his example. Fixes unicode conversion above U+00FFFF being done into 2 characters", "Lang-43": "Fix for LANG-477 OutOfMemory with custom format registry and a pattern containing single quotes - thanks to Duncan Eley", "Lang-44": "Applying test/fix from LANG-457 - getting a StringIndexOutOfBounds from createNumber rather than a NumberFormatException", "Lang-45": "Applying Vincent Behar's second patch for LANG-419 - fixing a bug in abbreviate such that lower limits greater than the length of the string weren't working correctly", "Lang-46": "StringEscapeUtils.escapeJava(String) escapes '/' characters", "Lang-47": "Applying my patch from LANG-412; fixing Peter Oxenham's report that the appendFixedWidthPadRight and appendFixedWidthPadLeft are not null safe if the nullText has not been set", "Lang-48": "Applying my patch from LANG-393; EqualsBuilder uses compareTo for BigDecimal and not equals", "Lang-49": "", "Lang-50": "Applying Sebb's test and fix from LANG-368 - fixing it so that FastDateFormat getDateInstance and getDateTimeInstance continue to work if Locale.getDefault() changes", "Lang-51": "Applying Sebb's test and fix for LANG-365", "Lang-52": "Applying Scott Bassin's fix and test from LANG-363", "Lang-53": "Applying the fix and the test patches from LANG-346 - fixes bugs in DateUtils.round() for minutes and seconds. Patch from Dave Meikle", "Lang-54": "Applying unit test/fix for LANG-328", "Lang-55": "Applying test and fix for LANG-315", "Lang-56": "Applying test for #LANG-303, and a fix.", "Lang-57": "Applying test for LANG-304 and fix to LocaleUtils", "Lang-58": "Fixing LANG-300 (reported by Jeremy Lemaire) - 1L to 9L incorrectly throw exceptions when passed into NumberUtils.createNumber. Fixed in both the math.NumbersUtils and the deprecated NumberUtils classes.", "Lang-59": "Applying a unit test for LANG-299 and the fix that Francisco Benavent suggests.", "Lang-60": "Fixng LANG-295 - thisBuf.length calls. There were two of the calls, so I've committed a unit test showing things are broken and a fix in both cases.", "Lang-61": "Fixing #LANG-294. The indexOf method did not take into account the size variable that limited the amount of the buffer that should be looked at.", "Lang-62": "Applying unit test and fix for #LANG-292. Also fixes a couple of problems with the unescape(Writer..) overload that came up", "Lang-63": "Adding a unit test for #LANG-281 and a fix. The fix involves removing the reduceAndCorrect method. It appears that this method was doing sod all - which is worrying as it used to be important. I'm guessing that it was a bad fix for a bug that was then subsequently fixed with other code. I'll create a JIRA issue to create more tests to test out the +31 block of code.", "Lang-64": "- Fix compareTo to check the type is the same", "Lang-65": "Adding Niall's fix for LANG-59 - an edge case in date truncation - and his enhancement for the unit test that was there.", "Time-1": "Fix NPE in Partial.with()", "Time-2": "Fix NPE in Partial.with()", "Time-3": "Adding zero no longer changes the offset during DST overlap", "Time-4": "Prevent creation of invalid partials via Partial.with(DateTimeFieldType,int)", "Time-5": "Fix handling of PeriodType when either years or months missing", "Time-6": "Fix GJChronology.plus/minus across cutover and year zero", "Time-7": "Fix DateTimeFormatter.parseInto() where it obtains the default year", "Time-8": "Fix to allow offsets from -00:01 to -00:59", "Time-9": "Ensure there is a max/min valid offset in DateTimeZone", "Time-10": "Days.daysBetween fails for MonthDay", "Time-11": "Fix ZoneInfoCompiler and DateTimeZoneBuilder multi-threading", "Time-12": "Fix fromCalendarFields()/fromDateFields() to handle era BC correctly", "Time-13": "Fix period formatter to correctly output values negative milliseconds [3564249]", "Time-14": "Fix MonthDay add/subtract around Feb29 [3528941]", "Time-15": "FieldUtils.safeMultiply(long,int) [3520651]", "Time-16": "Fix DateTimeFormatter.parseInto() [3522138]", "Time-17": "Fix time zone later/earlier offset methods in Western hemisphere [3476684]", "Time-18": "Fix GJChronology to allow some leap year dates in JulianChronology to be created [3446915]", "Time-19": "Ambiguous date-time when in zone with offset of 00:00 [3424669]", "Time-20": "Fix zone id parsing for ids like America/Dawson_Creek [3427389]", "Time-22": "Duraton.toPeriod(), new Period(long), new MutablePeriod(long) [3264409] Fixed to obey Javadoc. Previously, they didn't obey the Javadoc if the default time-zone had no daylight savings.", "Time-23": "[3216471] Time-zone ID \"MET\" from java.util.TimeZone is now mapped correctly. Other time-zone conversions have been updated appropriately", "Time-24": "Conversion from parsed values to a date-time handles weird sets of fields better [3161586] This change is mostly for combinations like weekyear-month-week The new code doesn't handle all combinations perfectly, but its better than it was", "Time-25": "[2952991] The behaviour during DST overlaps is now defined to always return the earlier instant which is normally known as daylight or summer time. Previously, the result varied by hemisphere. This affects the constructor of DateTime and other methods", "Time-26": "[bugs 3102760,2182444,2553453] New method now retains the offset wherever possible during calculations This affects higher methods like withHourOfDay/withMinuteOfHour/withSecondOfMinute/withMillisOfSecond which now do not change offset when called within a DST overlap", "Time-27": "Period formatter builder append(PeriodFormatter) did not handle some case [2495455] test from Bjoern Ricks", "Closure-1": "In simple mode, do not remove unreferenced function arguments. Fixes issue 253", "Closure-2": "Fix null pointer bug encountered when trying to extend non-existent interfaces.", "Closure-3": "Special case catch expressions to work around the fact that we don't module catch block as lexical scope for the exception and it doesn't belong in the function scope. Fixes issue 864.", "Closure-4": "Fix issue 873 Converting from an interface type to a constructor which @implements itself causes stack overflow.", "Closure-5": "Do not inline an object literal if it has a property that gets deleted.", "Closure-6": "Fix parts of issue 635, mostly by deleting hacks that are now obsolete", "Closure-7": "Fix goog.isFunction, typeof x == 'function', and similiar type inference. Fixes issue 841.", "Closure-8": "Don't collapse assignments into var declarations if it would cause a redeclarion of a named parameter.", "Closure-9": "counter DOS shell file name normalization fixes issue 824", "Closure-10": "Properly determine if any possible results may be a string. Fixes issue 821", "Closure-11": "fix a bogus 'if' branch. I have no idea what this was doing. Fixes issue 810", "Closure-12": "Fix may-use data flow analysis in the presence of ON_EX edges. Fixes issue 794", "Closure-13": "Fixes issue 787.  Removing or replacing a Node is the AST caused any following Function nodes to be skipped in the late peephole folding. To prevent this save off the \"next\" node before visiting a Node.", "Closure-14": "when handling a finally block like so, try { alert(1) } finally { } There needs to be 2 edges: an unconditional edge to the statement after the 'finally', and an edge for the code path that continues handling the exception. Label the second edge with ON_EX instead of UNCOND. Fixes issue 779", "Closure-15": "Don't inline values over a \"delete\". Fixes issue 773", "Closure-16": "When expanding goog.scope aliases in type expressions, do not expand the alias until previous aliases have been expanded. fixes issue 772", "Closure-17": "When declaring @const vars initialized to a type-casted value, prefer the type-cast as the declared type. fixes issue 688", "Closure-18": "Allow dependency sorting even when closure pass is off. Fixes issue 768", "Closure-19": "Handle 'this' properly in the RAI. fixes issue 769", "Closure-20": "fix a bad String() optimization fixes issue 759", "Closure-21": "Automated g4 rollback", "Closure-22": "You are in a maze of twisty 'if' branches, all alike. cleanup the logic for identifying dead expressions. Fixes issue 753", "Closure-23": "Don't fold arrays if they have side effects. Contributed by Robert Gust-Bardon Fixes issue 747", "Closure-24": "Emit an error if there are dangling functions in the goog.scope fixes issue 737", "Closure-25": "Fix some bugs in 'new' inference: - traverse children before the parent - do backwards inference on params, like we do for CALL Fixes issue 729", "Closure-26": "don't bother with module exports if there's nothing to export Fixes issue 732", "Closure-27": "Correct IR helpers for TRY nodes. Fixes issue 727.", "Closure-28": "Lower the cost of true/false/null. Fixes issue 728", "Closure-29": "don't try to inline properties that we don't recognize, because they may be prototype properties. This isn't a perfect fix, but should get most cases. Fixes issue 724", "Closure-30": "fixes issue 698", "Closure-31": "add dependency management in whitespace-only mode contributed by Chris Peisert fixes issue 703", "Closure-32": "preserve whitespace at the beginning of license blocks makes the <code> in closure docs look a lot better fixes issue 701", "Closure-33": "fix a bug in constraint-matching fixes issue 700", "Closure-34": "More recursion unrolling Fixes issue 691", "Closure-35": "push reverse-inference into the type system fixes issue 669", "Closure-36": "Remove addSingletonGetter stragglers. Fixes issue 668", "Closure-37": "Prevent unsupport JavaScript variants that Rhino can parse from crashing the compiler in \"ide mode\". Fixes issue 663", "Closure-38": "Negative zero is a special case, and needs to be handled differently to prevent it from getting confused with decrement fixes issue 657", "Closure-39": "print record types better when generating typed code. fixes issue 643", "Closure-40": "fix smartNameRemoval crash Fixes issue 284", "Closure-41": "When inferring a function type, there may be formal parameters that do not appear in the function literal Fixes issue 368", "Closure-42": "Don't silently ignore transform \"for each\" into \"for\" loops, report an error instead. Fixes issue 644", "Closure-43": "defer evaluation of the @lends annotation fixes issue 314", "Closure-44": "Fix issue 620", "Closure-45": "Don't remove assignments to variables whose values have escaped and are later modified. Fixes issue 618.", "Closure-46": "Fix a bunch of bugs in record type sup/inf with proxy types Fixes issue 603", "Closure-47": "Fix how source line numbers are stored in the source files. Fixes issue 575", "Closure-48": "Fix issue 586. Distinguishing declared functions from inferred functions is really hard!", "Closure-49": "Modify normalization to distinguish function expression names from parameters and local variables. Fixes issue 539.", "Closure-50": "[].join(',') --> [].join() Fixes issue 558", "Closure-51": "Correct output of -0.0. Fixes issue 582.", "Closure-52": "numbers are hard! fixes issue 569", "Closure-53": "Fix edge case in InlineObjectLiteral. Fixes issue 545", "Closure-54": "Support chrome-team's style of defining prototypes. Fixes issue 537", "Closure-55": "Don't attempt to rewrite object literal get/set definitions. Fixes issue 538.", "Closure-56": "When getting a line from the source code according to the line number, if it happens to be the last line, and '\\n' character is missing in the end of the file, we should still return the last line.", "Closure-57": "Handle bad goog.require/goog.provide calls more gracefully. Fixes issue 530.", "Closure-58": "Allow expressions on LHS of for-in loops. Fixes issue 528.", "Closure-59": "Fix order of operations of GLOBAL_THIS options. Fixes issue 521", "Closure-60": "fix a mishandling of the void keyword also fix a bunch of apis fixes issue 504", "Closure-61": "Automated g4 rollback.", "Closure-62": "Automated g4 rollback.", "Closure-64": "When -language_in=ECMASCRIPT5_STRICT, only print 'use strict' in the first input file. Fixes Issue 489.", "Closure-65": "Encode the null byte more correctly, because we have to be careful of look ahead. Contributed by kosmo.zb Fixes issue 486", "Closure-66": "Fixes Issue 482 In percent typed counting, ignore the nodes of Enum elements", "Closure-67": "Only remove prototype properties defined with simple assigment statements. Fixes issue 459.", "Closure-68": "Fix a jsdoc parser bug where it was dropping the EndOfComment token Fixes issue 477", "Closure-69": "Make sure that functions are called with a 'this' type. Fixes issue 440", "Closure-70": "Parameter types should be declared, rather than inferred. This means that if the programmer re-assignes the argument to a different type, they will get a type warning. Fixes issue 433.", "Closure-71": "Emit a warning when a private property overrides another private property, with both defined in the ctor. Fixes issue 254", "Closure-72": "Label names must be made unique when inlining a function. Fixes issue 435", "Closure-73": "Codepoint U+007f should not appear raw in output Fixes issue 416 http://code.google.com/p/closure-compiler/issues/detail?id=416", "Closure-74": "Fix more regressions caused by TRUE/FALSE denormalization. Fixes issue 413", "Closure-75": "Fix \"string-to-number\" conversions in the presense of verical tabs. Fixes issue 395.", "Closure-76": "Correct handling of conditional branches within expressions when doing dead assignment elminination. Fixes issue 384.", "Closure-77": "Special case the NUL character. Fixes issue 383", "Closure-78": "Delete the divide by zero error I've never heard of this catching any real bug. It seems like if you explicitly typed \"1 / 0\", you meant to do that. fixes issue 381", "Closure-79": "Normalize extern VAR declarations Fixes issue 367.", "Closure-80": "\"delete\" operator with a boolean result. Fixes issue 364", "Closure-81": "Generate a parse error for unnamed function statements. Fixes issue 251.", "Closure-82": "Treat the bottom function type as empty. Fixes issue 301.", "Closure-83": "fix a bug in open-source args parsing. Fixes issue 319.", "Closure-84": "Don't let invalid LHS assignments to slip through. Fixes issue 215. Fixes issue 214.", "Closure-85": "Don't remove nodes out of traversal order. Fixes issue 311.", "Closure-86": "Fix improper analysis of NEW, the bad way: by assuming NEW always returns a non-local result. Fixes issue 303.", "Closure-87": "a really terrible fix for issue 291 fixes issue 291", "Closure-88": "Fix checks for variable reads in expressions with assignments. Fixes issue 297.", "Closure-89": "Turn off collapsing for non-constructor function properties. Fixes issue 289.", "Closure-90": "Coerce null and undefined out of the @this type when we resolve lazily. We already do this when we resolve @this blocks immediately. There's some question about whether we should be coercing to the global object instead, but i'm going to just punt on this for now. Fixes issue 274", "Closure-91": "don't emit unsafe global this warnings when the @lends annotation is used correctly. fixes issue 248", "Closure-92": "Fix bug with implicit namespaces across modules. Contributed by bolinfest Fixes issue 261", "Closure-94": "Generalize define value handling allow ADD and other basic ops, fix BITxxx handling so they don't allow invalid operands.", "Closure-95": "If a property is defined on a global name, but in a local scope, declare that property in the global scope. this goes most of the way towards fixing issue 66.", "Closure-96": "check var_args properly Fixes issue 229.", "Closure-97": "Propertly fold \">>> 0\" on negative values. Fixes issue 200", "Closure-98": "Change on 2010/06/09 by nicksantos", "Closure-99": "Change on 2010/06/03 by nicksantos", "Closure-100": "Change on 2010/05/27 by johnlenz", "Closure-101": "Removing useless members variables. (Alan) R=robert DELTA=4  (0 added, 4 deleted, 0 changed)", "Closure-102": "\"var arguments\" never shadows the built-in arguments array. Fixes issue 115.", "Closure-103": "Make the CFA recognize possible ON_EX edges for instanceof operations. Fixes issue 113. (Alan)", "Closure-104": "Fixes a bug in getGreatestSubtype (Andrew)", "Closure-105": "Fix an edge case in how Array.prototype.join is collapsed. Fixes issue 106.", "Closure-106": "- Fix issue #19 - attach jsdoc comments without annotations to nodes", "Closure-107": "Shut off i18n warnings if the user didn't ask for i18n. Fixes issue 1135 R=blickly", "Closure-108": "Don't try to process jsdoc nodes twice. Fixes issue 1144 R=blickly", "Closure-109": "Tweak the grammar for this/new types. Fixes issue 1105 R=johnlenz", "Closure-110": "Handle function declarations in ScopedAliases. Fixes issue 1111 R=johnlenz", "Closure-111": "Restrict goog.isArray to * properly. Fixes issue 1114 R=blickly", "Closure-112": "Don't infer class template keys when inferring method template keys. Fixes issue 1058. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=53874505", "Closure-113": "This change had to be rolled-back, since it breaks some users of the Java API. See the updated comment and new test case for reasoning.", "Closure-114": "SmartNamePass shouldn't record assignment dependencies if the rhs is a call. The rhs is used by the context, so we don't want it removed if the lhs isn't used.", "Closure-115": "Automated g4 rollback of changelist 53511956.", "Closure-116": "Nerf direct function inlining when the function be inlined has side-effects and the call arguments can be effected. Fixes issue 1101 ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=53511956", "Closure-117": "Rejigger type name printing. Fixes issue 1047 R=johnlenz", "Closure-118": "Fix DisambiguateProperties handling of quoted properties", "Closure-119": "Fix for errors wrt exceptions in the global scope. Fixes issue 1070 R=blickly", "Closure-120": "Fix inlining bug in https://code.google.com/p/closure-compiler/issues/detail?id=1053 Attempt 2 Fixes issue 1053 ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50800167", "Closure-121": "Fix inlining bug in https://code.google.com/p/closure-compiler/issues/detail?id=1053 ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50726739", "Closure-122": "Improve detection of suspicious block comments.", "Closure-123": "Printing of IN statement inside HOOK inside FOR.", "Closure-124": "Fixes issue 1017 ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=47616701", "Closure-125": "Skip checks if constructor has no instance type.", "Closure-126": "Fix bug in MinimizeExitPoints with removing breaks inside finally blocks.", "Closure-127": "Fix tests and code in UCE that do unsound optimizations in finally blocks.", "Closure-128": "Don't quote \"0\" object literal keys. Fixes issue 942 ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=44143868", "Closure-129": "Look through CAST nodes when annotating CALL nodes as free calls. Fixes issue 937 ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=44143144", "Closure-130": "Don't attempt to inline aliases of external names during collapse properties as all the sets can not be accounted for. Fixes issue 931 ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=43187988", "Closure-131": "Add patch from issue 921 as well as accompanying unit test.", "Closure-132": "Don't reorder if condition expressions if they contain side-effects. Fixes issue 925. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=43060270", "Closure-133": "Fixes issue 919", "Closure-134": "Fixes a bug in AmbugateProperties in the presence of interfaces.", "Closure-135": "Type-checking fix when the prototype is assigned directly. Fixes issue 59.", "Closure-136": "The MethodCompilerPass was being a little too smart for itself, leading to incorrect behavior by the InlineGetter pass (inlining extern definitions of functions which it thought were empty functions). This results in slight worse behavior by the depreciated \"MethodCheck\" pass, but most projects have moved on to \"check_types\" which is on by default. (John) R=Alan DELTA=77  (44 added, 28 deleted, 5 changed)", "Closure-137": "Fix assorted type system bugs and crashes. Fixes issue 124. (Nick) R=andrew DELTA=161  (122 added, 9 deleted, 30 changed)", "Closure-138": "Fix assorted type system bugs and crashes. Fixes issue 124 for reals. (nick) R=andrew DELTA=161  (122 added, 9 deleted, 30 changed)", "Closure-139": "Remove var declarations when name functions are in the same scope. Fixes Issue 33 (John) R=nick DELTA=206  (155 added, 16 deleted, 35 changed)", "Closure-140": "fix silly 2004-era naming conventions (Nick) R=john DELTA=134  (0 added, 0 deleted, 134 changed)", "Closure-141": "Tweak to allow chained initialization: new Node(Token.EXPR_RESULT, a).copyInformationFrom(a); (John) R=alan DELTA=10  (6 added, 0 deleted, 4 changed)", "Closure-142": "Make lists the canonical representation of compiler sources. They're so much easier to sort and mutate, which is going to make a difference once we start sorting sources. (Nick) R=robert DELTA=97  (58 added, 6 deleted, 33 changed)", "Closure-143": "Change on 2010/04/06 by john", "Closure-144": "Change on 2010/06/22 by nicksantos", "Closure-145": "Change on 2010/06/25 by johnlenz", "Closure-146": "Change on 2010/07/02 17:44:46 by nicksantos", "Closure-147": "Change on 2010/07/09 08:36:29 by nicksantos", "Closure-148": "Change on 2010/07/15 12:32:23 by johnlenz", "Closure-149": "Clean up the command-line runner api, which uncovered a bunch of bugs in Options serialization. Set the output charset to US-ASCII by default, but let the user set it to UTF-8. Fixes Issue 205", "Closure-150": "Unify global scope building and local scope building. This goes a long way towards fixing issue 61. Try #2", "Closure-151": "Add version numbers to closure compiler. Fixes issue 74.", "Closure-152": "validation for @this annotation. looks about the same as the @extends validation. Fixes issue 268", "Closure-153": "If a variable is doubly declared in externs and sources, we should keep around both VAR keywords. Fixes issue 290", "Closure-154": "Fixes issue 204 Add support for data members on interfaces", "Closure-155": "Don't inline alias if \"arguments\" are modified or escaped. Fixes issue 378", "Closure-156": "Fix a nasty bug in collapseproperties. The problem is that the declaration-updater conflates \"can i always collapse this name?\" with \"can i sometimes collapse children of this name?\" There are a few rare cases where they are not equivalent, like if you have /** @constructor */ a.b.c = function() {}; where a is collapsed and a.b.c is collapsed (because constructors are always collapsed), but a.b is not. Fixes issue 389", "Closure-157": "Define number keys in object literals to be quoted string nodes. Tagged with NUMBER_PROP Fixes issue 347", "Closure-158": "Create new command-line parsers so that jscomp_off, jscomp_warning jscomp_error get interpreted in the correct order relative to one another. Fixes issue 407", "Closure-159": "Fix mismatch between the definition of candidate references used when initially gathering references and when checking for inlining conflicts. Fixes issue 423", "Closure-160": "Compose warnings guards correctly so that people can turn on the undefined variables check by itself. order of execution is hard! Fixes issue 467", "Closure-161": "Don't try to fold array literal accesses that are acting as a assignment target. Fixes issue 522.", "Closure-162": "Collect aliases before collecting usages Fixes issue 548", "Closure-163": "Rewrite how AnalyzePrototypeProperties reasons about contextual information. This fixes a lot of bugs in how local and captured variables are handled. Fixes issue 600.", "Closure-164": "It doesn't make sense for a subclass method to require arguments that aren't required by the superclass method.", "Closure-165": "Better property checks, by creating a notion of \"synthetic\" types that we use for internal bookkeeping, and not using those for property checks. fixes issue 725", "Closure-166": "More complicated constraint-matching. Fixes issue 785", "Closure-167": "Clean up the reverse abstract interpreter a bit so that we handle \"checked unknowns\" better, and don't have lots of spurious unknown slots during data flow-based type inference. fixes issue 783", "Closure-168": "Add a heuristic for figuring out the type of an inferred variable that is read across multiple scopes. This isn't perfect, but it should catch a lot of common cases. Fixes issue 726", "Closure-169": "Add a new isInvariant relation. Fixes issue 791.", "Closure-170": "Fix issue 965 ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=45371896", "Closure-171": "Handle prototype assignments much better. Fixes issue #1023.", "Closure-172": "Prototype properties should not be auto-declared as non-object types. Fixes issue 1042. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=49400223", "Closure-173": "Fix 8-year old bug in CodeGenerator.", "Closure-174": "Make sure ScopedAliases doesn't crash when there's a dangling var ref. Fixes issue 1103 R=dimvar", "Closure-175": "Automated g4 rollback of changelist 53524738.", "Closure-176": "Better type inference on declared vars. Fixes issue 1056 R=johnlenz", "Math-1": "Fix creation of Fraction/BigFraction objects in maxDenominator mode when the value is close to an actual fraction.", "Math-2": "Reordering can prevent some overflow occurrences (fix suggested by Brian Bloniarz). Added unit test.", "Math-3": "Array of length 1 must be handled as a special case.", "Math-4": "Fixed NullPointerException in 2D and 3D sub-line intersections.", "Math-5": "Fixed Complex.reciprocal() for zero argument.", "Math-6": "Increment iteration counter. By default, the maximum number of iterations is \"Integer.MAX_VALUE\".", "Math-7": "Fixed missing update in ODE event handlers.", "Math-8": "Fixed creation of generic array.", "Math-9": "Fixed accuracy of 3D Line.revert().", "Math-10": "Fixed DerivativeStructure.atan2 for special cases when both arguments are +/-0.", "Math-11": "Fixed truncated value. Thanks to Piotr Wydrych. Added unit test: comparing density values with univariate normal distribution.", "Math-12": "Made \"BitsStreamGenerator\" class \"Serializable\" to allow cloning of subclasses. Added cloning test for all \"RealDistribution\" classes. Thanks to Dennis Hendriks.", "Math-13": "Avoid memory exhaustion for large number of unclorrelated observations.", "Math-14": "Using a diagonal matrix to avoid exhausting memory.", "Math-15": "Fixed wrong assumption in \"pow\" method.", "Math-16": "Avoid overflow on the whole range covered by the equivalent functions in the standard \"Math\" class.", "Math-17": "Allow unlimited input values for Dfp#multiply.", "Math-18": "Modified \"encode\" and \"decode\" methods. Unit test \"testFitAccuracyDependsOnBoundary\" now passes and is thus enabled. Unit test \"testConstrainedRosen\" had to be modified in order to not fail with the new code (starting point is set closer to the solution).", "Math-19": "Early detection that overflow will occur in the variables normalization procedure (\"encode\" method). Warning mentioned in the documentation.", "Math-20": "Fixed missing \"repair\" of a point that lies outside the boundaries. Thanks to Frank Hessen for the report and for pinpointing the cause of the problem.", "Math-21": "Fixed an error in rectangular Cholesky decomposition.", "Math-22": "Clarified definition of isSupportXxxBoundInclusive in RealDistribution interface, made code consistent with the definition, and deprecated these methods, marking for removal in 4.0. JIRA: MATH-859", "Math-23": "(second take). Best point must be returned.", "Math-24": "The best point is sometimes not the last one evaluated.", "Math-25": "Generate an exception when the parameter guessing procedure cannot perform correctly (in rare ill-conditioned cases).", "Math-26": "Improve overflow check for negative values in Fraction constructor.", "Math-27": "Avoid overflow.", "Math-28": "Add additional heuristic for rare cases in pivotRow selection.", "Math-29": "  - modified OpenMapRealVector.ebeMultiply() and ebeDivide() to handle special cases  0d * NaN, 0d * Infinity, 0d / 0d and 0d / NaN.   - added implementation of isNaN() and isInfinite() to SparseRealVectorTest.SparseRealVectorTestImpl in order to allow for testing of OpenMapRealVector.ebeMultiply() and ebeDivide() with mixed types.", "Math-30": "Patch applied to fix the overflow issue.", "Math-31": "Use modified Lentz-Thompson algorithm for continued fraction evaluation.", "Math-32": "Fixed a wrong assumption on BSP tree attributes.", "Math-33": "use epsilon criteria when deciding to drop columns after phase 1.", "Math-34": "Fixed iterator() method in ListPopulation to return an iterator of the unmodifiable list, thanks to Reid Hochstedler.", "Math-35": "Use same range check in ctor as in setter for ElitisticListPopulation. Thanks to Reid Hochstedler", "Math-36": "Fixed \"doubleValue()\" and \"floatValue()\" when numerator and denominator are larger than the range of the corresponding primitive type.", "Math-37": "Introduced tests to guard against overflow (MATH-722). Corrected Javadoc and updated unit tests accordingly.", "Math-38": "Offset by one bug. Suggested fix provided by Bruce Johnson. I've added a unit test that exercises the use of more interpolation points; two previously unexplored code paths are now being traversed.", "Math-39": "Check first step size in embedded Runge-Kutta integrators.", "Math-40": "Fixed bracketing interval balancing in BracketingNthOrderBrentSolver.", "Math-41": "Fixed array indexing error in Variance evaluate method for computing the weighted variance of an array segment.", "Math-42": "Fixed case of unconstrained variables that still occur in the objective function in simplex solver.", "Math-43": "Fixed errors in SummaryStatistics causing overriden statistics not to be updated if the supplied impls are commons-math classes.  JIRA: MATH-691.", "Math-44": "Fixed an event resetting issue in ODE.", "Math-45": "Fixed an integer overflow in OpenMapRealMatrix.", "Math-46": "Reverting to previous behaviour, as requested by P. Steitz.", "Math-47": "Complex division by zero:  z / 0 = INF if z is not ZERO  0 / 0 = NaN", "Math-48": "Early detection of \"Regula Falsi\" algorithm being stuck due to finite precision. Javadoc makes it clear that either the Pegasus or the Illinois solver should be preferred over the Regula Falsi one (due to D. Hendriks).", "Math-49": "Iterate on the original vector, not on the copy that is modified.", "Math-50": "Reverted to original behaviour.", "Math-51": "Work around infinite loop.", "Math-52": "Fixed a wrong detection of rotation axis versus vectors plane in Rotation constructor using two vectors pairs.", "Math-53": "Fixed add method to match javadoc contract when one or both addends has NaN parts.", "Math-54": "Fixed conversion problems to/from 0 in Decimal Floating Point (Dfp) class.", "Math-55": "Reduced cancellation errors in Vector3D.crossProduct", "Math-56": "Fixed bug in \"MultidimensionalCounter\". Thanks to James Bence.", "Math-57": "Wrong  variable type (\"int\" instead of \"double\").", "Math-58": "Workaround exception generated when the optimizer tries invalid values for the \"sigma\" parameter. Added a method to allow the user to pass his own initial guess.", "Math-59": "FastMath.max(50.0f, -50.0f) => -50.0f; should be +50.0f", "Math-60": "Modified NormalDistributionImpl.cumulativeProbability to return 0 or 1, respectively for values more than 40 standard deviations from the mean. For these values, the actual probability is indistinguishable from 0 or 1 as a double.  Top coding improves performance for extreme values and prevents convergence exceptions.", "Math-61": "Removed deprecated methods.", "Math-62": "(point 13) Selecting a random start value (instead of interval bounds).", "Math-63": "Removed deprecated methods.", "Math-64": "corrected", "Math-65": "fixed", "Math-66": "Another bug uncovered; all things being equal, the code now behaves like the Puthon implementation. MATH-397: Modified \"BrentOptimizer\" following the changes in \"AbstractUnivariateRealOptimizer\".", "Math-67": "Fixed inconsistent definition of \"getResult\". Modified associated test accordingly.", "Math-68": "Fixed Levenberg-Marquardt optimizer that did not use the vectorial convergence checker. Now this optimizer can use either the general vectorial convergence checker or its own specialized convergence settings. Minor changes had to be introduced in the test data, they have been validated JIRA: MATH-362", "Math-69": "Fixed loss of significance error in PersonsCorrelation p-value computation causing p-values smaller than the machine epsilon (~1E-16) to be reported as 0. JIRA: MATH-371 Reported and patched by Kevin Childs", "Math-70": "Fix NullPointerException in BisectionSolver.solve(f, min, max, initial) JIRA: MATH-369", "Math-71": "Fixed an error in events handling in ODE solvers. In some rare cases, events occurring close to a step start were handled without truncating the step, making them appear as is they occurred close to the step end JIRA: MATH-358", "Math-72": "Fixed wrong return values when enpoints are roots in Brent solver with a user provided initial guess JIRA: MATH-344", "Math-73": "Fixed a missing bracketing check of initial interval in Brent solver JIRA: MATH-343", "Math-74": "Fixed automatic step initialization in embedded Runge-Kutta integrators. The relative tolerance setting was never used, only the absolute tolerance was used. JIRA: MATH-338", "Math-75": "Fixed regression in Frequency.getPct(Object) introduced in 2.0. Cumulative percent was being returned for Object arguments in place of percent.", "Math-76": "Singular Value Decomposition now computes either the compact SVD (using only positive singular values) or truncated SVD (using a user-specified maximal number of singular values). Fixed Singular Value Decomposition solving of singular systems. JIRA: MATH-320, MATH-321", "Math-77": "fixed a wrong implementation of the Linf vector norm JIRA: MATH-326", "Math-78": "Fixed an error in handling of very close events during ODE integration JIRA: MATH-322", "Math-79": "Fixed an overflow error in MathUtils.distance that was causing KMeansPlusPlusClusterer to fail with a NullPointerException when component distances between points exceeded Integer.MAXVALUE. JIRA: MATH-305 Reported by Erik van Ingen", "Math-80": "Fixed an index computation error in eigen decomposition. Once again, kudos to Dimitri for debugging this. JIRA: MATH-318", "Math-81": "fixed an ArrayIndexOutOfBoundsException Kudos to Dimitri who debugged this mess of fortran/java array indices translation JIRA: MATH-308", "Math-82": "fixed an error induced by zero entries in simplex solver JIRA: MATH-288", "Math-83": "fixed an error leading the simplex solver to compute the right solution but return another one JIRA: MATH-286", "Math-84": "Prevent infinite loops in multi-directional direct optimization method when the start point is exactly at the optimal point JIRA: MATH-283", "Math-85": "fixed a bracketing issue due to inconsistent checks JIRA: MATH-280", "Math-86": "fixed detection of not positive definite matrices JIRA: MATH-274", "Math-87": "Fixed a wrong check for basic variables JIRA: MATH-273", "Math-88": "Fixed a problem when setting some variables (several variables were set instead of only one) JIRA: MATH-272", "Math-89": "- throw IllegalArgument rather than ClassCast to better retain original behaviour", "Math-90": "- check for Comparable when adding values", "Math-91": "Fixed a comparison error when two different fractions evaluate to the same double due to limited precision. Jira: MATH-252", "Math-92": "Fixed error in binomial coefficient computation JIRA: MATH-241 Reported and patched by Christian Semrau", "Math-93": "Fixed error in factorial accuracy.  JIRA: MATH-240.", "Math-94": "fixed overflow error in gdc computation JIRA: MATH-238", "Math-95": "propagated trunk changes from r699157 into branch 2.0 MATH-227.  fixed F distribution inverse CDF computation for small denominator degrees of freedom.", "Math-96": "Changed the Complex.equals() method so that it considers +0 and -0 are equal, as required by IEEE-754 standard. JIRA: MATH-221", "Math-97": "ported all changes from trunk between r6152100 (branch 2.0 creation) and r670469 (today) These changes contain fixes for MATH-204 and MATH-205", "Math-98": "fixed dimension error in operate method for RealMatrixImpl and BigMatrixImpl JIRA: MATH-209", "Math-99": "Fixed an error in computing gcd and lcm for some extreme values at integer range boundaries. JIRA: MATH-243", "Math-100": "fixed crashes in AbstractEstimator when some parameters are bound. getCovariances() and guessParametersErrors() now only give result about unbound parameters JIRA: MATH-200", "Math-101": "added an error detection for missing imaginary character while parsing complex string JIRA: MATH-198", "Math-102": "Added check and rescaling of expected counts to sum to sum of expected counts if necessary in ChiSquare test. JIRA: MATH-175 Reported and patched by Carl Anderson.", "Math-103": "Modified NormalDistributionImpl.cumulativeProbablity to catch MaxIterationsExceededException and return 0 or 1, resp. if the argument is more than 20 standard deviations from the mean.", "Math-104": "Increased default epsilon for Gamma, Beta function evaluation. JIRA: MATH-166 Reported and patched by Lukas Theussl", "Math-105": "Modified getSumSquaredErrors method in SimpleRegression to always return a non-negative result. JIRA: MATH-85 Reported by Mark Osborn Patched by Luc Maisonobe", "Math-106": "Modified ProperFractionFormat to reject embedded minus signs. JIRA: MATH-60 Reported by Nhung Nnguyen"}