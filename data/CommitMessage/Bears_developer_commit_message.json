{"Bears-1": "Fix #1476", "Bears-2": "Fix #1506", "Bears-3": "Fix #1493", "Bears-4": "Fix #1501", "Bears-5": "Fixed #1367", "Bears-6": "Fix #935", "Bears-7": "Fixed #1505", "Bears-8": "Fixed #1513", "Bears-9": "Merge pull request #1534 from Tillerino/2.8  Fix #1533: Respect ACCEPT_EMPTY_STRING_AS_NULL_OBJECT for polymorphism.", "Bears-10": "Add enum handling wrt #994", "Bears-11": "Fixed #1570", "Bears-12": "Merge pull request #1574 from jjware/2.8  Fixes #1573", "Bears-13": "Fixed #1345", "Bears-14": "Fix #1599 for 2.7(.10)", "Bears-15": "Fix #1607", "Bears-16": "Improve error handling wrt #1612; add a test to verify exception being thrown", "Bears-17": "Fix #1616", "Bears-18": "Fix #1592", "Bears-19": "Fix #1595 for 2.8.9", "Bears-20": "Fix #1629", "Bears-21": "Fix #1648", "Bears-22": "Merge pull request #1650 from slobo-showbie/2.8  Fix #1647: Missing properties from base class when recursive types are involved", "Bears-23": "Fix #1657 (I hope)", "Bears-24": "Fix #1658", "Bears-25": "Fix #1679", "Bears-26": "Merge branch '2.7' into 2.8", "Bears-27": "fix(position): implicit elements do not have position (#1086)  Fix #1084", "Bears-28": "fix(comment): fix bug in comments in array initialization (#1088)  Closes #1073", "Bears-29": "fix(reference): fix reference in ctconstructor (#1095)", "Bears-30": "fix(NPE):Fix NullPointerException resulting from variable accesses in constructors. (#1098)  * Fix NullPointerException resulting from variable accesses in ctors.    `createVariableAccessNoClasspath` throws a NullPointerException if a  variable access is resolved for parameters in constructors as the parent  of constructor node is not available at this point.    * Add test case.", "Bears-31": "fix: visibility detection issue in CtElement #1099 (#1102)  * reproduce ElasticSearch access path problem #1099    * fix access path problem    * fix other tests    * Add one more assert on tests to check behaviour when overriding inner class. Replace some assertTrue by assertEquals to help debug test.", "Bears-32": "fix(CtQuery):CCE on Query#forEach call of CtConsumer#apply (#1126)", "Bears-33": "fix: getSuperClass does not throw exception in noClassPath mode. (#1128)  Fix #1125", "Bears-34": "fix(comment): support comment on string concatenation (#1124)  fix #1123", "Bears-35": "fix: Improve static import support in auto-import mode (#1155)  closes #1152", "Bears-36": "fix: fix autoimport regression (#1162)", "Bears-37": "fix: CtMethod#isDefaultMethod (#1165)", "Bears-38": "fix: fix regression with a lambda expression extends Function (#1178)", "Bears-39": "fix: LocalVariableScopeFunction handles CtFor, CtTryWithResource, local classes, ...  (PR #1154, close #1170)", "Bears-40": "fix: inner interfaces should be properly handled in CtTypeReferenceImpl#canAccess (#1189)", "Bears-41": "fix(noclasspath): fix the qualified name of partial qualified reference (inner class) (#1201)", "Bears-42": "fix: fix regression (NPE) in DefaultJavaPrettyPrinter (#1214)", "Bears-43": "fix: CtExecutableReference#isOverriding correctly handles anonymous classes (#1219)", "Bears-44": "fix: fix wrong behavior for special cases in removeStatement. Closes #1221. (#1224)", "Bears-45": "fix: fix bug in getDeclaration(). Closes #1213. (PR #1215)  This change impacts declaration lookup of field references after clone.", "Bears-46": "fix: fix NPE in CtElement#getMetadataKeys. Closes #1239 (#1240)", "Bears-47": "fix: fix a bug in wrongly qualified type in executable references  (#1259)  Closes  #1258    * Create a proper unit test for #1258 and propose a fix    * Add an assertion", "Bears-48": "fix: fix regression regarding actual type arguments resolving (#1273)  close #1271", "Bears-49": "fix: fix special case not handled in factory.Annotation().annotate() (#1278)  Close #1264", "Bears-50": "fix: fix JDT error when input resource contains an entirely commented class (#1279)  Close  #1274", "Bears-51": "fixx: fix bug in CtExecutableReference#getActualMethod when parameters are generically typed (#1277)", "Bears-52": "fix: fix SuperInheritanceHierarchyFunction in noClassPath mode (#1281)", "Bears-53": "fix: in noClasspath, a type without import should be considered in the same package as the current class (#1302)", "Bears-54": "fix: fix bug in import inference (auto-import mode). Close #1306. (#1308)", "Bears-55": "fix: improve ImportScanner to support variables called \"java\" (#1321)  fix #1320", "Bears-56": "fix: fix NPE in isTypeInCollision (#1326)", "Bears-57": "fix: auto-import works for compilation units with multiple classes in the same file (#1322)", "Bears-58": "fix: improve line preservation mode (#1335)", "Bears-59": "fix: fix bug in getActualMethod() due to missing information in CtTypeParameterReference (#1286)", "Bears-60": "fix behavioral in line-preservation mode: newlines should not pollute toString (#1349)", "Bears-61": "fix(factory): create type reference from inner class (#1361)", "Bears-62": "fix(template): Substitution#insertAll should bypass Template methods (#1348)", "Bears-63": "fix: fix regression related to ReferenceBuilder and generics (#1373)", "Bears-64": "fix: bugs related to continue algorithm of ClassTypingContext (#1379)  * test continue in hierarchy scanning of ClassTypingContext    * fix continue algorithm of ClassTypingContext", "Bears-65": "fix(reflection): add annotation value in the model (#1384)", "Bears-66": "fix: fix bug related to CtTypeParameterReference and getDeclaration (#1383)", "Bears-67": "fix: fix issue related to overridden methods in getAllMethods (#1375)", "Bears-68": "fix: fix a bug with import static  (#1412)", "Bears-69": "fix(role): fix wrong roles (#1397)", "Bears-70": "fix: fix NPE with union catch inside lambda in noclasspath (#1416)", "Bears-71": "fix: fix issue in ClassTypingContext#isOverriding (#1411)  close #1407", "Bears-72": "fix(prettyprinter): throws SpoonException with info instead of NPE in Pretty Printer on missing variable declaration (#1451)  * test of Printing of invalid model    * report error during printing", "Bears-73": "fix: ignore only ClassCastException in query code (#1462)", "Bears-74": "fix(reference): fix getReference of an unknown class that has the same name as an existing class (#1480)", "Bears-75": "fix: compute positions of elements (#1493)  * reproduce problem    * fix wrong modifier position for types    * test annotations position    * fix annotations position    * fix end position of Annotation with parameters    * test position of annotation with parameter    * test position of body of abstract and annotation method declaration    * fix position of body of abstract and annotation method declaration    * fix JavaDoc backward->forward", "Bears-76": "fix(template): object is not an template parameter implicitly (#1461)  * failing test of Object is always a template parameter    * fix Object is not a template parameter    * Revert \"failing test of Object is always a template parameter\"    This reverts commit ce7eb978a52f2e8f569b0d5c0dd1c1fd063c9589.    * Undo test changes", "Bears-77": "fix(comment): splitting of comment by EOL (#1455)  * test MS Windows EOL and comments    * test wild comments    * fix splitting of comment by EOL    * fix comment handling on Mac OS and imporove algorithm", "Bears-78": "fix: fix NPE in noclasspath mode (#1502)  Fix #1501", "Bears-79": "fix: fix issue related to processing generic types (#1504)  fix #1503", "Bears-80": "fix(setInputClassloader): bug when using a URLClassLoader with standard URLs. (#1507)  * Bug fix when using a URLClassLoader with file: URLs.    * Fix return problem and checkstyle. Add an assertion in compilation test.    * Add a new test to check the behaviour of setInputClassLoader when the classloader contains other resources than local files    * Now fail explicitely when setting a URLClassloader with other resources than local file", "Bears-81": "fix: fix a stack overflow when calling getDeclaration in noclasspath (#1515)  fix #1516     * Fixed test name.    * Fix a potential stack overflow with CtTypeParameterReference    * Improve test", "Bears-82": "fix(template): replacing of field access by refining behaviour of String parameter (#1476)  * test: reproduce the problem    * fix SubstitutionVisitor    * fix old tests - behavior changed!    * minor change to force Travis run again    * Revert \"fix old tests - behavior changed!\"    This reverts commit 7005aef70acb84e98590e7db44022a98587c6939.    * Add a new test corresponding to the example of #1444    * Only change the error comment when the contract is not respected with parameter value    * Add the new template test class    * Change SubstitutionVisitor to treat differently case A and case B    * Fix checkstyle    * test: field access in inner class    * rollback SubstitutionVisitor treat differently case A and case B    * convert String to Literal parameter value automatically    * disable one Substitution#checkTemplateContracts contract    * adapt test to pass SubstitutionVisitor changes    * adapt test InvocationTemplate    * adapt test FieldAccessOfInnerClassTemplate    * add GeneratedByMember required by new feature    * do not create CtLiteral automatically    * restore the Template Parameter constraint    * parameter of type String is simply substituted in method name    * If String literal is needed then template must already contain it    * report invalid field reference    * add path the the failing node into exception    * update Template documentation    * Fix PrinterTest    * Change documentation for Template    * Fix typo", "Bears-83": "fix(template): relax template parameter constraint (#1535)  * test CtTypeReference as Template parameter    * fix: TemplateParemeter proxy can be used for CtTypeReference", "Bears-84": "DATACMNS-957 - AuditingHandler now works with entities without an identifier.  Entities without an identifier previously an exception because the IsNewStrategyFactory wasn't able to determine a strategy even if there was no auditing to be applied in the first place.  We now eagerly check for auditability and skip the lookup for an IsNewStrategy completely in case that check returns false.  Related pull request: #189.", "Bears-85": "DATACMNS-972 - Fixed ProjectingJackson2HttpMessageConverter.canRead(\u2026) for generic type variables.  ProjectingJackson2HttpMessageConverter.canRead(\u2026) now resolves the given type correctly, even in context of their owning class.", "Bears-86": "DATACMNS-776 - Made ProxyingHandlerMethodArgumentResolver to only support user types or annotated ones.  ProxyingHandlerMethodArgumentResolver is now more lenient when it comes to which types to support for proxying. As indicated in the ticket, we've been to aggressive opting in for all interfaces which - depending on the order of converter registrations - caused us interfering with other interface based resolutions (e.g. in Spring Mobile, Security etc.).  We now only aggressively kick in if either the type or parameter is annotated with @ProjectedPayload or the type itself is not a Spring Framework or native Java one. This should leave user defined types still be accepted whereas the types we previously erroneously interfered with should now be ignored.", "Bears-87": "DATACMNS-1087 - Fixed Vavr Option creation from present value.  We now reflectively invoke the static method Option.of(\u2026), while we previously tried to invoke an instance method on the parameter value.", "Bears-88": "DATACMNS-1115 - Improve RepositoryBeanNameGenerator to properly resolve bean names for indexed BeanDefinitions.  Previously, RepositoryBeanNameGenerator applied the custom bean name lookup if the BeanDefinition given was not a ScannedGenericBeanDefinition. That in turn had been the case for custom implementation classes that were obtained through classpath scanning. With Spring 5 an index file can be used by the scanner, which in turn will cause AnnotatedGenericBeanDefinition instances being returned. That caused the code path to lookup the first constructor argument to kick in (usually used to obtain the repository interface from repository factory beans) and cause a NullPointerException.  We now forward AnnotatedBeanDefinitions as is and only apply the custom lookup for everything else, i.e. the bean definitions used for the factories.", "Bears-89": "DATACMNS-1138 - TypeInformation.specialize(\u2026) now only specializes unresolved parameterized types.  Type specialization - i.e. enrichment of a raw type with a current generic context - is now only done if the current type is not yet resolved completely. This allows wildcarded target references to just fall back to the type to specialize, which will then by definition carry more generics information than the one to be specialized.", "Bears-90": "DATACMNS-1139 - AbstractPersistentProperty.getRawType() now correctly resolves generics.  We're now favoring the generic TypeInformation over trying to resolve the property type via field or PropertyDescriptor as only the former does proper generic type resolution.", "Bears-91": "DATACMNS-1152 - Setup of ProjectingJackson2HttpMessageConverter now tries to use unique ObjectMapper from ApplicationContext.  We're now trying to look up a uniquely available ObjectMapper instance from the application context falling back to a simple new instance in case none can be found.", "Bears-92": "DATACMNS-1173 - Fixed value lookup of AnnotationRevisionMetadata.  Fixed handling of absent values. Minor refactorings. More unit tests.", "Bears-93": "DATACMNS-1175 - Remove argument array caching from EntityInstantiators.  We no longer cache argument arrays in our EntityInstantiators to prevent changes to shared mutable state caused by reentrant calls.  Previously, a re-entrant call requesting an argument array of the same size as a previous call in the call stack reused the same array instance. Changes to this shared mutable state by multiple invocations caused an invalid state rendering wrong parameters for object instantiation. Removing the caching and only reusing an empty array for zero-arg constructors is the only safe approach for now.  Re-instantiation of object allocations results in a higher GC pressure but guarantee side effect-free instantiation and should be on-par with previous versions performance profile.  Original pull request: #247.", "Bears-94": "DATACMNS-1196 - Fixed generics lookup for nested generics in ParameterizedTypeInformation.  We now eagerly resolve a generics declaration chain, which we previously - erroneously - expected GenericTypeResolver to do for us. Simplified TypeVariableTypeInformation implementation. Renamed ParameterizedTypeUnitTests to ParameterizedTypeInformationUnitTests.", "Bears-95": "DATACMNS-1201 - Support generated property accessors for types in default packages.  We now support generated property accessors for types that reside in the default package.  Original pull request: #256.", "Bears-96": "DATACMNS-1215 - Fixed repository lookup for proxy domain classes.  We now consistently use the user class for repository (metadata) lookup in Repositories.", "Bears-97": "DATACMNS-563 - PagedResourcesAssembler now correctly forwards one-index settings to PageMetadata.  Original pull request: #267.", "Bears-98": "Another small GoSafe fix", "Bears-99": "Better handle H02 X mode (fix #2780)", "Bears-100": "Merge pull request #2833 from Abyss777/fix_ignition  Rise ignition events only if both positions has ignition attribute", "Bears-101": "Fix GL200 wifi message parsing", "Bears-102": "Remove some Teltonika params", "Bears-103": "Ensure that odometer is a number (fix #2967)", "Bears-104": "Add Suntech HBM flag", "Bears-105": "Handle no power value from Telic", "Bears-106": "Fix another Telic issue", "Bears-107": "Handle empty Starlink cell info", "Bears-108": "Import cGuard protocol decoder (fix #3080)", "Bears-109": "Fix ST940 Alert decoding", "Bears-110": "Fix H02 status code decoding", "Bears-111": "Fix TLT2H time regex pattern", "Bears-112": "Fix Antlanta L-100 regex pattern", "Bears-113": "Fix PT502 coordinates decoding", "Bears-114": "Handle StarLink no location data", "Bears-115": "Handle full Watch message", "Bears-116": "Fix MU-201 message decoding (fix #3220)", "Bears-117": "Fix GPS103 OBD message decoding", "Bears-118": "Merge pull request #3253 from 5of9/master  Filter Invalid upgrade and Wondex fix", "Bears-119": "Fix H02 short message handling", "Bears-120": "Merge pull request #3306 from ckrey/Aplicom-fix  Ignore Aplicom Alive messages", "Bears-121": "Fix all protocol unit tests", "Bears-122": "Fix GL300VC decoding issue", "Bears-123": "Merge pull request #3450 from Abyss777/fix_trip_detector  Fix trips and stops detector", "Bears-124": "Handle eSky negative coords", "Bears-125": "Decode negative temperature", "Bears-126": "Merge pull request #3481 from AnshulJain1985/GT06_Alarm  GT06 alarm packet issue", "Bears-127": "Handle GOOME status message", "Bears-128": "Fix H02 simple message decoding", "Bears-129": "Fix GV200 INF message decoding", "Bears-130": "Handle MVT380 no power value", "Bears-131": "Fix Meitrack temperature (fix #3604)", "Bears-132": "Fix GV65+ ERI message decoding", "Bears-133": "Fix JT600 frame decoder", "Bears-134": "Handle invalid battery level", "Bears-135": "Fix TMG frame decoder", "Bears-136": "Fix eelink udp length field", "Bears-137": "Fix Totem AT09 frames decoding", "Bears-138": "Fix GK310 A2 decoding", "Bears-139": "Handle missing T333 taxi info", "Bears-140": "Added Unit Tests - H2MS Utils", "Bears-141": "Merge pull request #64 from stbenjam/lowercase  Store and retrieve username by lower case", "Bears-142": "Merge pull request #1831 from cristianflorescu/ACT-4316-boundary-event  ACT-4316 set user task end time when it is completed", "Bears-143": "Merge 48411b105afda985655abc7226ac1b6cc3831575 into 8a10eb685b9853a646dcf76b325635ee7bb44b3e", "Bears-144": "Temp fix for corr error in build", "Bears-145": "Spdz dummy triple gen", "Bears-146": "Fix mascot input mask gen", "Bears-147": "Random bit mask test", "Bears-148": "Fix up compuin96", "Bears-149": "Merge pull request #1204, condition router match `default.xxx'  Fixes #1201", "Bears-150": "    #1411: Locale deserialize 'zh-hant_CN'", "Bears-151": "merge issue 1401 to 2.5.x (#1460)  * merge issue 1401 to 2.5.x    * modify    * sync test case from master", "Bears-152": "Merge pull request #1607, graceful shutdown enhancement.  - Remove exporter destroy logic in AnnotationBean.  - Waiting for registry notification on consumer side by checking channel state.", "Bears-153": "[SCB-264] fix microservice description register problem", "Bears-154": "[SCB-521] Config of Spring Boot should takes higher priority than microservice.yaml", "Bears-155": "OAK-6392: Partial lastRev update with branches disabled  Merge revision 1799861 from trunk and enable test  git-svn-id: https://svn.apache.org/repos/asf/jackrabbit/oak/branches/1.0@1825038 13f79535-47bb-0310-9956-ffa450edef68", "Bears-156": "[#519] Little cleanup and ensure tests run on all supported DBMS", "Bears-157": "fix test", "Bears-158": "make tests green", "Bears-159": "DBZ-525 Timestamp supports optional microseconds part", "Bears-160": "DBZ-524 RESTRICT in DROP COLUMN", "Bears-161": "DBZ-530 Multiple PARTITION defintions supported", "Bears-162": "DBZ-615 Init unset Decimal props to default values", "Bears-163": "DBZ-660 Fix for CONSTRAINT UNIQUE syntax", "Bears-164": "DBZ-671 Date/time parsing covers more exotic formats", "Bears-165": "Fix DataElementOperand so default COC does not equal no COC (#1723)  (cherry picked from commit 6c3377a4155070781b259059935941938d092203)", "Bears-166": "Copy phase in Status copy constructor  This fixes #927", "Bears-167": "Enhance address validation in REST API  * Ensure no duplicate addresses within new addresses * Ensure no duplicate addresses in new addresses and existing addresses  This fixes #931", "Bears-168": "Validate required fields and provide correct HTTP response on validation errors  Fixes #1082", "Bears-169": "Fix LLC consumer to handle segment build fails gracefully (#2499)  * Fix LLC consumer to handle segment build fails gracefully    If segment build fails then we used throw NPE while tyring to delete a null file name.  Fixed the condition, and added a test.  We now handle the condition gracefully, and also set LLC_PARTITION_CONSUMING gauge to 0  so that we can alert on the partition that stopped consumption.    * Modified comment", "Bears-170": "Merge pull request #7125 from Mark-de-Haan/fix/7110  Fix #7110 A mapping service mapping error has its toString value inserted into an integrated dataset", "Bears-171": "Merge pull request #7274 from dennishendriksen/fix/7183-csvImportRowMissing  Fix #7183 CSV read exception on #values mismatch with #headers", "Bears-172": "Fix #7263 Row-level secured findOne: return first readable entity", "Bears-173": "Merge pull request #7277 from dennishendriksen/fix/6906-emxDuplicateColIds  Fix #6906 Duplicate col header exception for CSV and Excel repository", "Bears-174": "Merge pull request #7303 from dennishendriksen/fix/7297-oneToManyIntIds  Fix #7297 One-to-many with integer ids retrieval", "Bears-175": "Merge pull request #7320 from dennishendriksen/fix/6945-emxAbstractEntityTypeData  Fix #6945 NPE importing EMX with abtract entity type data", "Bears-176": "Fixes stackoverflow bug", "Bears-177": "Properly handle parameter counts for constructors with synthetic parameters.", "Bears-178": "Added check for illegal instance call from static method.", "Bears-179": "Do not resolve methods that are declared by java.lang.Object to invokeinterface calls even if those methods are invoked on an interface.", "Bears-180": "Fix NPE for GCS buckets that have underscores (#316)  Fixes #314.", "Bears-181": "Close the ResultSet (#469)  This commit makes sure that the `ResultSet` internally created by  `count` is closed.", "Bears-182": "Fixed issue with secondary index force usage in SQL (#564)", "Bears-183": "Spanner pageable options fix (#596)", "Bears-184": "DATAJPA-658 - Fixed potential NullPointerException in JpaMetamodel.  When iterating over EntityType<?> we need to guard against \u2026.getJavaType() returning null. That seems to be the case for Hibernate Envers which apparently registers EntityType instances without a backing type.  Original pull request: #146.", "Bears-185": "DATAJPA-928 - Enabled native query with Pageable.  Just removed the check that was actively preventing the use of Pageable. Migrated to tests to AssertJ where applicable.  Original pull request: #246.", "Bears-186": "Issue-7438 Fix that prevents generating interfaces when interfaceOnly is false. (#7439)", "Bears-187": "Merge pull request #8003 from swagger-api/issue-7999  show number as strings", "Bears-188": "Replaced paintComponent(Graphics g) called method with repaint() method.", "Bears-189": "Change to pass tests", "Bears-190": "NodeStatus: Handle hostnames in endpointsStatus output  Cassandra does a ipAddress.toString() when creating the output for FailureDetectorMBean.getAllEndpointStates(), which can make the ip address header lines look like: hostname/<ipaddress>  It also does the same for the key in FailureDetectorMBean.getSimpleStates()  Changed code to not use regexes to split getAllEndpointStates() output but instead to group them into strings by looking for lines that don't start with two spaces and treating those as record \"starts\". Hostnames are stripped from the header lines if present. getSimpleStates() keys are also sanitized of hostnames.  Added a test with hostnames in the output from getAllEndpointStates() and getSimpleStates()", "Bears-191": "Try to show IPv6 endpoints in UI correctly", "Bears-192": "Fix duration issues in the UI  Timezone shenanigans between the server and the UI can lead to inconsistent display of ETA or duration. The repair run status is now shipping with a currentTime value that is generated on the server side to match the startTime/endTime/pauseTime timezones and allow consistent diffs to be made.", "Bears-193": "fixing bean definitions", "Bears-194": "re-check for sanitized arguments", "Bears-195": "Merge 9a855c7082bd2b6152faa16dbf4df40acc7453c3 into f2d73f7914c03cc95b884b69b3e660ee0a7ae033", "Bears-196": "Merge branch 'enumconverter-vs-null' of https://github.com/peculater/incubator-tamaya", "Bears-197": "Merge pull request #248 from SmithJosh/respect-path-in-servername-config  Include serverName path when constructing service url", "Bears-198": "Bug fix, where a builder had copied one field twice and omitted the copy of another field.", "Bears-199": "Remove a possible deadlock on polling queue fill (#462)  * Remove a possible deadlock on polling queue fill    Adding new items to the receive queue for the PrefetchRecordsPublisher  when at capacity would deadlock retrievals as it was already holding  a lock on this.    The method addArrivedRecordsInput did not need to be synchronized on  this as it didn't change any of the protected  state (requestedResponses).  There is a call to drainQueueForRequests  immediately after the addArrivedRecordsInput that will ensure newly  arrived data is dispatched.    This fixes #448    * Small fix on the reasoning comment    * Adjust the test to act more like the ShardConsumer    The ShardConsuemr, which is the principal user of the  PrefetchRecordsPublisher, uses RxJava to consume from publisher. This  test uses RxJava to consume, and notifies the test thread once  MAX_ITEMS * 3 have been received. This ensures that we cycle through  the queue at least 3 times.    * Removed the upper limit on the retrievals    The way RxJava's request management makes it possible that more  requests than we might expect can happen.", "Bears-200": "Merge pull request #884 from AxonFramework/bugfix/883  Do not try to convert a null source, provide an empty string instead.", "Bears-201": "Fix unit test breakage.", "Bears-202": "Merge pull request #278 from larsgrefer/fix/gh-277  Fix #277", "Bears-203": "make test green", "Bears-204": "Added equals methods to pass tests", "Bears-205": "Merge pull request #1586 from zouyx/master  Block delete default cluster", "Bears-206": "#180 - Tests and fixes around rtl overflow pages.", "Bears-207": "Merge 59cc404c100c6be2544fe52529e4cbb049343293 into ad529743c8029074d7ab59f2d1b471572b49a2aa", "Bears-208": "DBZ-927 Gracefully handling invalid default values for timestamp fields", "Bears-209": "Improved eviction strategy for lock holder - Locks that doesn't hold by any thread and neither one thread are waiting to acquire this lock - Implemented logic in accordance with specifications", "Bears-210": "Merge branch 'master' of https://github.com/dungba88/libra", "Bears-211": "Fix #153", "Bears-212": "Merge pull request #112 from vboulaye/closed-stream-when-autoclose-disabled  fix #99 do not close stream when autoclose is disabled in yaml generator/parser", "Bears-213": "Merge pull request #3 from fraenkelc/pageable_on_custom_method  Pageable on custom method", "Bears-214": "Merge branch 'null-rackId' into staging", "Bears-215": "fix(ImportScanner): unused imports should not be added (#2486)", "Bears-216": "fix: compiled snippets have no parent (#2503)", "Bears-217": "Merge aa1b0121e34ba490729b07019fc5188c25fb3102 into 51e64eb8924b7a33d4d87608d0e83f374e82c0ef", "Bears-218": "fix: CtPackageDeclaration has a valid source position (#2760)", "Bears-219": "fix: parsing of java version not starting with \"1.\" in pom.xml (#2729)  * Check if java.version contains a dot in pom.xml    * cover all cases and added an Assert in MavenLauncherTest    * (style) added a missing whitespace    fix #2714", "Bears-220": "Fix array convertion in U.toXml(map).", "Bears-221": "[JENKINS-54133] Pregenerating console notes sent to agents for some common cases (#128)  * [JENKINS-54133] Pregenerating console notes sent to agents for some common cases.    * Changelog entry.", "Bears-222": "Fixed bug in Watts-Strogatz Generator (#699)  * Fixed bug in Watts-Strogatz Generator     The problem manifested when the vertices are not integers.    * Minor optimization", "Bears-223": "Merge pull request #4 from julianps/Fix-null-value-Issue  Fixed npe when context holds a null source-value", "Bears-224": "added tests for pipelines and fixed the problem of encountering runtime exceptions", "Bears-225": "Consider value multiplicity in reactive output resolution #879  Lettuce now checks for the value multiplicity when resolving the actual output type for reactive Redis commands methods.  Previously, all reactive types were considered streaming ones which caused usage of a not applicable output type. So Mono<String> used KeyListOutput which propagated null values.", "Bears-226": "Test fix.", "Bears-227": "Filter out sythetic fields from FieldQueryMapEncoder (#840)", "Bears-228": "HTML-678: When editing existing encounter, time component of encounter datetime should not be lost", "Bears-229": "RESTWS-740: ObsResource.setConcept should support reposted data (maps) (#362)", "Bears-230": "Fixes #4 : protect against possible contractual null values returned by different method from the jdbc interface. Update various dependencies", "Bears-231": "Added tests for empty and string assign.", "Bears-232": "Merge pull request #4 from paritytrading/fixes/byte-arrays-pack  Fix 'ByteArrays#pack'", "Bears-233": "Merge 3e676728a435e8b3368e179e869c15610624dfc0 into aff3d736775a247f6c54876e8a50d0789ac8a7b1", "Bears-234": "Transfer Service Test - Account disabled", "Bears-235": "Account Manager Test - forbid disable parent account when at leat one of its children is enabled", "Bears-236": "Fix handling of inconsistent inner type attribute as it is sometimes generated by Scalac.", "Bears-237": "Allow field access for static fields outside of type hierarchy.", "Bears-238": "Fixed primitive ignoring bug", "Bears-239": "Merge 69398d6b3a318b3f768c235a03fba44302dabd8a into 81e8257c4386d0821faaf2ec1110a8e1f4b2493e", "Bears-240": "Context must read system properties to rewrite properties from file.  Close #58", "Bears-241": "Issue15 - handle pull request title (#16)  * upgrading to ci-droid-api.version 1.0.4    * fixes https://github.com/societe-generale/ci-droid-tasks-consumer/issues/15", "Bears-242": "Merge pull request #1559 from ivangalkin/fix_1557  Fix MethodName for nested classes", "Bears-243": "[bugfix, critical] the Operations from AllOps have NULL the dst node. (#49)  The root has all info. The reason is the metadata is written after  converting to spoon all ops, and before the convertion of root.", "Bears-244": "DATACMNS-1422 - Fall back to reflection-based PropertyAccessor/EntityInstantiator on inaccessible framework types.  We now fall back to reflection-based PropertyAccessor/EntityInstantiator strategies when framework types are not visible by the entity's ClassLoader.  Typically, we use class generation to create and load PropertyAccessor and EntityInstantiator classes to bypass reflection. Generated types are injected into the ClassLoader that has loaded the actual entity. Generated classes implement framework types such as ObjectInstantiator and these interfaces must be visible to the ClassLoader that hosts the generated class. Some arrangements, such as OSGi isolate class repositories so the OSGi class loader cannot load our own types which prevents loading the generated class.  Original pull request: #324.", "Bears-245": "Check parameter Modifiers (#678)  * Check parameter modifiers for non final modifiers    Signed-off-by: shaishavgandhi05 <shaishgandhi@gmail.com>    * Add extra line    Signed-off-by: shaishavgandhi05 <shaishgandhi@gmail.com>    * Fix formatting    Signed-off-by: shaishavgandhi05 <shaishgandhi@gmail.com>", "Bears-246": "Merge pull request #157 from haering/master  Start/Resume Playback position_ms has to be a body parameter", "Bears-247": "Merge pull request #145 from tsegismont/issue/140  One shot update actions should return generated keys by default", "Bears-248": "Added a test for redirection limit in WebClient", "Bears-249": "Refactor tests", "Bears-250": "Fix vector creation with unordered maps (#291)  Signed-off-by: Ashok Bommisetti <ashok@shapesecurity.com>", "Bears-251": "Minor bug fix"}